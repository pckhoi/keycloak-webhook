export enum UserEventType {
  AuthreqidToToken = 'AUTHREQID_TO_TOKEN',
  AuthreqidToTokenError = 'AUTHREQID_TO_TOKEN_ERROR',
  ClientDelete = 'CLIENT_DELETE',
  ClientDeleteError = 'CLIENT_DELETE_ERROR',
  ClientInfo = 'CLIENT_INFO',
  ClientInfoError = 'CLIENT_INFO_ERROR',
  ClientInitiatedAccountLinking = 'CLIENT_INITIATED_ACCOUNT_LINKING',
  ClientInitiatedAccountLinkingError = 'CLIENT_INITIATED_ACCOUNT_LINKING_ERROR',
  ClientLogin = 'CLIENT_LOGIN',
  ClientLoginError = 'CLIENT_LOGIN_ERROR',
  ClientRegister = 'CLIENT_REGISTER',
  ClientRegisterError = 'CLIENT_REGISTER_ERROR',
  ClientUpdate = 'CLIENT_UPDATE',
  ClientUpdateError = 'CLIENT_UPDATE_ERROR',
  CodeToToken = 'CODE_TO_TOKEN',
  CodeToTokenError = 'CODE_TO_TOKEN_ERROR',
  CustomRequiredAction = 'CUSTOM_REQUIRED_ACTION',
  CustomRequiredActionError = 'CUSTOM_REQUIRED_ACTION_ERROR',
  DeleteAccount = 'DELETE_ACCOUNT',
  DeleteAccountError = 'DELETE_ACCOUNT_ERROR',
  ExecuteActionToken = 'EXECUTE_ACTION_TOKEN',
  ExecuteActionTokenError = 'EXECUTE_ACTION_TOKEN_ERROR',
  ExecuteActions = 'EXECUTE_ACTIONS',
  ExecuteActionsError = 'EXECUTE_ACTIONS_ERROR',
  FederatedIdentityLink = 'FEDERATED_IDENTITY_LINK',
  FederatedIdentityLinkError = 'FEDERATED_IDENTITY_LINK_ERROR',
  GrantConsent = 'GRANT_CONSENT',
  GrantConsentError = 'GRANT_CONSENT_ERROR',
  IdentityProviderFirstLogin = 'IDENTITY_PROVIDER_FIRST_LOGIN',
  IdentityProviderFirstLoginError = 'IDENTITY_PROVIDER_FIRST_LOGIN_ERROR',
  IdentityProviderLinkAccount = 'IDENTITY_PROVIDER_LINK_ACCOUNT',
  IdentityProviderLinkAccountError = 'IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR',
  IdentityProviderLogin = 'IDENTITY_PROVIDER_LOGIN',
  IdentityProviderLoginError = 'IDENTITY_PROVIDER_LOGIN_ERROR',
  IdentityProviderPostLogin = 'IDENTITY_PROVIDER_POST_LOGIN',
  IdentityProviderPostLoginError = 'IDENTITY_PROVIDER_POST_LOGIN_ERROR',
  IdentityProviderResponse = 'IDENTITY_PROVIDER_RESPONSE',
  IdentityProviderResponseError = 'IDENTITY_PROVIDER_RESPONSE_ERROR',
  IdentityProviderRetrieveToken = 'IDENTITY_PROVIDER_RETRIEVE_TOKEN',
  IdentityProviderRetrieveTokenError = 'IDENTITY_PROVIDER_RETRIEVE_TOKEN_ERROR',
  Impersonate = 'IMPERSONATE',
  ImpersonateError = 'IMPERSONATE_ERROR',
  IntrospectToken = 'INTROSPECT_TOKEN',
  IntrospectTokenError = 'INTROSPECT_TOKEN_ERROR',
  InvalidSignature = 'INVALID_SIGNATURE',
  InvalidSignatureError = 'INVALID_SIGNATURE_ERROR',
  Login = 'LOGIN',
  LoginError = 'LOGIN_ERROR',
  Logout = 'LOGOUT',
  LogoutError = 'LOGOUT_ERROR',
  Oauth2DeviceAuth = 'OAUTH2_DEVICE_AUTH',
  Oauth2DeviceAuthError = 'OAUTH2_DEVICE_AUTH_ERROR',
  Oauth2DeviceCodeToToken = 'OAUTH2_DEVICE_CODE_TO_TOKEN',
  Oauth2DeviceCodeToTokenError = 'OAUTH2_DEVICE_CODE_TO_TOKEN_ERROR',
  Oauth2DeviceVerifyUserCode = 'OAUTH2_DEVICE_VERIFY_USER_CODE',
  Oauth2DeviceVerifyUserCodeError = 'OAUTH2_DEVICE_VERIFY_USER_CODE_ERROR',
  PermissionToken = 'PERMISSION_TOKEN',
  PermissionTokenError = 'PERMISSION_TOKEN_ERROR',
  PushedAuthorizationRequest = 'PUSHED_AUTHORIZATION_REQUEST',
  PushedAuthorizationRequestError = 'PUSHED_AUTHORIZATION_REQUEST_ERROR',
  RefreshToken = 'REFRESH_TOKEN',
  RefreshTokenError = 'REFRESH_TOKEN_ERROR',
  Register = 'REGISTER',
  RegisterError = 'REGISTER_ERROR',
  RegisterNode = 'REGISTER_NODE',
  RegisterNodeError = 'REGISTER_NODE_ERROR',
  RemoveFederatedIdentity = 'REMOVE_FEDERATED_IDENTITY',
  RemoveFederatedIdentityError = 'REMOVE_FEDERATED_IDENTITY_ERROR',
  RemoveTotp = 'REMOVE_TOTP',
  RemoveTotpError = 'REMOVE_TOTP_ERROR',
  ResetPassword = 'RESET_PASSWORD',
  ResetPasswordError = 'RESET_PASSWORD_ERROR',
  RestartAuthentication = 'RESTART_AUTHENTICATION',
  RestartAuthenticationError = 'RESTART_AUTHENTICATION_ERROR',
  RevokeGrant = 'REVOKE_GRANT',
  RevokeGrantError = 'REVOKE_GRANT_ERROR',
  SendIdentityProviderLink = 'SEND_IDENTITY_PROVIDER_LINK',
  SendIdentityProviderLinkError = 'SEND_IDENTITY_PROVIDER_LINK_ERROR',
  SendResetPassword = 'SEND_RESET_PASSWORD',
  SendResetPasswordError = 'SEND_RESET_PASSWORD_ERROR',
  SendVerifyEmail = 'SEND_VERIFY_EMAIL',
  SendVerifyEmailError = 'SEND_VERIFY_EMAIL_ERROR',
  TokenExchange = 'TOKEN_EXCHANGE',
  TokenExchangeError = 'TOKEN_EXCHANGE_ERROR',
  UnregisterNode = 'UNREGISTER_NODE',
  UnregisterNodeError = 'UNREGISTER_NODE_ERROR',
  UpdateConsent = 'UPDATE_CONSENT',
  UpdateConsentError = 'UPDATE_CONSENT_ERROR',
  UpdateEmail = 'UPDATE_EMAIL',
  UpdateEmailError = 'UPDATE_EMAIL_ERROR',
  UpdatePassword = 'UPDATE_PASSWORD',
  UpdatePasswordError = 'UPDATE_PASSWORD_ERROR',
  UpdateProfile = 'UPDATE_PROFILE',
  UpdateProfileError = 'UPDATE_PROFILE_ERROR',
  UpdateTotp = 'UPDATE_TOTP',
  UpdateTotpError = 'UPDATE_TOTP_ERROR',
  UserInfoRequest = 'USER_INFO_REQUEST',
  UserInfoRequestError = 'USER_INFO_REQUEST_ERROR',
  VerifyEmail = 'VERIFY_EMAIL',
  VerifyEmailError = 'VERIFY_EMAIL_ERROR',
  VerifyProfile = 'VERIFY_PROFILE',
  VerifyProfileError = 'VERIFY_PROFILE_ERROR',
}

export enum AdminEventOperationType {
  Action = 'ACTION',
  Create = 'CREATE',
  Delete = 'DELETE',
  Update = 'UPDATE',
}

export enum AdminEventResourceType {
  AuthExecution = 'AUTH_EXECUTION',
  AuthExecutionFlow = 'AUTH_EXECUTION_FLOW',
  AuthFlow = 'AUTH_FLOW',
  AuthenticatorConfig = 'AUTHENTICATOR_CONFIG',
  AuthorizationPolicy = 'AUTHORIZATION_POLICY',
  AuthorizationResource = 'AUTHORIZATION_RESOURCE',
  AuthorizationResourceServer = 'AUTHORIZATION_RESOURCE_SERVER',
  AuthorizationScope = 'AUTHORIZATION_SCOPE',
  Client = 'CLIENT',
  ClientInitialAccessModel = 'CLIENT_INITIAL_ACCESS_MODEL',
  ClientRole = 'CLIENT_ROLE',
  ClientRoleMapping = 'CLIENT_ROLE_MAPPING',
  ClientScope = 'CLIENT_SCOPE',
  ClientScopeClientMapping = 'CLIENT_SCOPE_CLIENT_MAPPING',
  ClientScopeMapping = 'CLIENT_SCOPE_MAPPING',
  ClusterNode = 'CLUSTER_NODE',
  Component = 'COMPONENT',
  Custom = 'CUSTOM',
  Group = 'GROUP',
  GroupMembership = 'GROUP_MEMBERSHIP',
  IdentityProvider = 'IDENTITY_PROVIDER',
  IdentityProviderMapper = 'IDENTITY_PROVIDER_MAPPER',
  ProtocolMapper = 'PROTOCOL_MAPPER',
  Realm = 'REALM',
  RealmRole = 'REALM_ROLE',
  RealmRoleMapping = 'REALM_ROLE_MAPPING',
  RealmScopeMapping = 'REALM_SCOPE_MAPPING',
  RequiredAction = 'REQUIRED_ACTION',
  User = 'USER',
  UserFederationMapper = 'USER_FEDERATION_MAPPER',
  UserFederationProvider = 'USER_FEDERATION_PROVIDER',
  UserLoginFailure = 'USER_LOGIN_FAILURE',
  UserSession = 'USER_SESSION',
}

export type Filter = {
  id?: string;
  userEventType?: UserEventType;
  adminEventResourceType?: AdminEventResourceType;
  adminEventOperationType?: AdminEventOperationType;
};

export type Webhook = {
  id?: string;
  name: string;
  url: string;
  filters: Filter[];
};
